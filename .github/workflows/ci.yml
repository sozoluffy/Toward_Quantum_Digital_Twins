# .github/workflows/ci.yml

name: CI

on:
  push:
    branches:
      - main # Or your default branch name like 'master'
  pull_request:
    branches:
      - main # Or your default branch name like 'master'

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Use a recent Ubuntu version

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Use v4 for checking out code

    - name: Set up Python
      uses: actions/setup-python@v5 # Use v5 for setting up Python
      with:
        # Use a compatible Python version. Python 3.8+ is required for Qiskit >= 1.0
        python-version: '3.x' # This will pick the latest 3.x available, typically 3.11 or 3.12

    # --- Steps to create a virtual environment ---
    # We create the venv, but subsequent steps will explicitly use its python/pip
    - name: Create Virtual Environment
      run: python -m venv .venv

    # --- End Virtual Environment Setup ---


    - name: Install dependencies
      # Now install dependencies explicitly using the venv's pip
      run: |
        # Ensure pip is up-to-date within the venv
        .venv/bin/python -m pip install --upgrade pip
        # Install everything from your requirements file into the venv
        .venv/bin/python -m pip install -r requirements.txt


    # Install your package itself into the virtual environment
    - name: Install package
      run: |
        # Install the package in editable mode (optional, but common for testing)
        .venv/bin/python -m pip install .


    - name: Run tests
      # Now run tests explicitly using the venv's pytest executable
      run: |
        .venv/bin/python -m pytest

    # Optional: Add linting or formatting checks (uncomment if you want them)
    # These would also need to be installed into the venv and run using .venv/bin/
    # - name: Run linter (flake8)
    #   run: |
    #     .venv/bin/python -m pip install flake8 # Install flake8 into venv
    #     .venv/bin/flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     .venv/bin/flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics

